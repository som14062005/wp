ðŸ§© 1. models/tvShowModel.js

const mongoose = require('mongoose');

const tvShowSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Title is required'],
    maxlength: [150, 'Title cannot exceed 150 characters'],
  },
  genre: {
    type: String,
    required: [true, 'Genre is required'],
    enum: ['Drama', 'Comedy', 'Action', 'Thriller', 'Sci-Fi', 'Horror', 'Romance', 'Documentary', 'Fantasy', 'Mystery'],
  },
  status: {
    type: String,
    required: [true, 'Status is required'],
    enum: ['Completed', 'Currently Watching', 'Plan to Watch', 'Dropped'],
  },
  totalEpisodes: {
    type: Number,
    required: [true, 'Total episodes required'],
    min: [1, 'Total episodes must be positive'],
  },
  watchedEpisodes: {
    type: Number,
    required: [true, 'Watched episodes required'],
    min: [0, 'Watched episodes cannot be negative'],
    validate: {
      validator: function (v) {
        return v <= this.totalEpisodes;
      },
      message: 'Watched episodes cannot exceed total episodes',
    },
  },
  rating: {
    type: Number,
    required: [true, 'Rating required'],
    min: [0, 'Rating cannot be below 0'],
    max: [10, 'Rating cannot exceed 10'],
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: [true, 'User ID required'],
  },
});

module.exports = mongoose.model('TVShow', tvShowSchema);


ðŸ§© 2. models/userModel.js

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  firstName: { type: String, required: [true, 'First name required'] },
  lastName: { type: String, required: [true, 'Last name required'] },
  mobileNumber: {
    type: String,
    required: [true, 'Mobile number required'],
    validate: {
      validator: function (v) {
        return /^[0-9]{10}$/.test(v);
      },
      message: 'is not a valid mobile number',
    },
  },
  email: {
    type: String,
    required: [true, 'Email required'],
    validate: {
      validator: function (v) {
        return /^\S+@\S+\.\S+$/.test(v);
      },
      message: 'is not a valid email address',
    },
  },
  role: { type: String, enum: ['user', 'admin'], required: [true, 'Role required'] },
  password: {
    type: String,
    required: [true, 'Password required'],
    minlength: [6, 'Password is shorter than the minimum allowed length'],
    maxlength: [255, 'Password is longer than the maximum allowed length'],
  },
});

module.exports = mongoose.model('User', userSchema);


ðŸ§© 3. controllers/tvShowController.js

const TVShow = require('../models/tvShowModel');

exports.getAllTVShows = async (req, res) => {
  try {
    const { sortOrder = 1 } = req.body;
    const tvShows = await TVShow.find().sort({ title: sortOrder });
    res.status(200).json(tvShows);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getTVShowById = async (req, res) => {
  try {
    const tvShow = await TVShow.findById(req.params.id);
    if (!tvShow) {
      return res.status(404).json({ message: 'TV show not found' });
    }
    res.status(200).json(tvShow);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getTVShowsByUserId = async (req, res) => {
  try {
    const { userId, status } = req.body;
    const query = { userId };
    if (status) query.status = status;
    const tvShows = await TVShow.find(query);
    res.status(200).json(tvShows);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.addTVShow = async (req, res) => {
  try {
    await TVShow.create(req.body);
    res.status(200).json({ message: 'TV Show Added Successfully' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.updateTVShow = async (req, res) => {
  try {
    const updated = await TVShow.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) {
      return res.status(404).json({ message: 'TV show not found' });
    }
    res.status(200).json({ message: 'TV Show Updated Successfully' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.deleteTVShow = async (req, res) => {
  try {
    const deleted = await TVShow.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: 'TV show not found' });
    }
    res.status(200).json({ message: 'TV Show Deleted Successfully' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

ðŸ§© 4. controllers/userController.js

const User = require('../models/userModel');

exports.getUserByUsernameAndPassword = async (req, res) => {
  try {
    const user = await User.findOne(req.body);
    if (!user) {
      return res.status(200).json({ message: 'Invalid Credentials' });
    }
    res.status(200).json(user);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.addUser = async (req, res) => {
  try {
    await User.create(req.body);
    res.status(200).json({ message: 'Success' });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json({ users });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

ðŸ§© 5. authUtils.js

exports.validateToken = (req, res, next) => {
  const token = req.header('Authorization');
  if (!token || token !== 'validToken') {
    return res.status(400).json({ message: 'Authentication failed' });
  }
  next();
};


ðŸ§© src/Components/Login.jsx

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState({});

  const validate = () => {
    const errs = {};
    if (!email) errs.email = 'Email is required';
    if (!password) errs.password = 'Password is required';
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    if (!validate()) return;
    try {
      const res = await axios.post('/api/login', { email, password });
      if (res.status === 200) navigate('/view');
    } catch {
      setErrors({ general: 'Invalid credentials' });
    }
  };

  return (
    <div>
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <div>
          <label>Email:</label>
          <input value={email} onChange={(e) => setEmail(e.target.value)} />
          {errors.email && <p>{errors.email}</p>}
        </div>

        <div>
          <label>Password:</label>
          <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          {errors.password && <p>{errors.password}</p>}
        </div>

        <button type="submit">Login</button>
        {errors.general && <p>{errors.general}</p>}
      </form>
    </div>
  );
};

export default Login;


ðŸ§© src/Components/Register.jsx

import React, { useState } from 'react';

const Register = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    mobile: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const [errors, setErrors] = useState({});

  const validate = () => {
    const errs = {};
    if (!formData.firstName) errs.firstName = 'First Name is required';
    if (!formData.lastName) errs.lastName = 'Last Name is required';
    if (!formData.mobile) errs.mobile = 'Mobile Number is required';
    if (!formData.email || !formData.email.includes('@'))
      errs.email = 'Please enter a valid email address';
    if (!formData.password || formData.password.length < 6)
      errs.password = 'Password must be at least 6 characters';
    if (!formData.confirmPassword)
      errs.confirmPassword = 'Confirm Password is required';
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    validate();
  };

  return (
    <div>
      <h2>Register for SavorStudio</h2>
      <form onSubmit={handleSubmit}>
        <label>First Name:</label>
        <input value={formData.firstName} onChange={(e) => setFormData({ ...formData, firstName: e.target.value })} />
        {errors.firstName && <p>{errors.firstName}</p>}

        <label>Last Name:</label>
        <input value={formData.lastName} onChange={(e) => setFormData({ ...formData, lastName: e.target.value })} />
        {errors.lastName && <p>{errors.lastName}</p>}

        <label>Mobile:</label>
        <input value={formData.mobile} onChange={(e) => setFormData({ ...formData, mobile: e.target.value })} />
        {errors.mobile && <p>{errors.mobile}</p>}

        <label>Email:</label>
        <input value={formData.email} onChange={(e) => setFormData({ ...formData, email: e.target.value })} />
        {errors.email && <p>{errors.email}</p>}

        <label>Password:</label>
        <input type="password" value={formData.password} onChange={(e) => setFormData({ ...formData, password: e.target.value })} />
        {errors.password && <p>{errors.password}</p>}

        <label>Confirm Password:</label>
        <input type="password" value={formData.confirmPassword} onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })} />
        {errors.confirmPassword && <p>{errors.confirmPassword}</p>}

        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default Register;

ðŸ§© src/Components/ErrorPage.jsx

import React from 'react';

const ErrorPage = () => (
  <div>
    <h2>Something Went Wrong</h2>
    <p>We're sorry, but an error occurred. Please try again later.</p>
  </div>
);

export default ErrorPage;

ðŸ§© src/Viewers/DisplayTVShows.jsx

import React from 'react';

const DisplayTVShows = () => {
  return (
    <div>
      <h2>TV Show Catalog</h2>

      <button>Logout</button>
      <select defaultValue="Sort by Title (A-Z)">
        <option>Sort by Title (A-Z)</option>
        <option>Sort by Rating (High-Low)</option>
      </select>

      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Genre</th>
            <th>Status</th>
            <th>Progress</th>
            <th>Rating</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colSpan="6">No TV shows found</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default DisplayTVShows;

ðŸ§© src/Admin/ManageTVShow.jsx

import React from 'react';

const ManageTVShow = () => {
  return (
    <div>
      <h2>Manage TV Shows</h2>
      <button>Add TV Show</button>
      <button>Logout</button>

      <select defaultValue="All Statuses">
        <option>All Statuses</option>
        <option>Ongoing</option>
        <option>Completed</option>
      </select>

      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Genre</th>
            <th>Status</th>
            <th>Progress</th>
            <th>Rating</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colSpan="6">No TV shows found</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default ManageTVShow;

ðŸ§© src/Admin/CreateTVShow.jsx

import React, { useState } from 'react';

const CreateTVShow = () => {
  const [form, setForm] = useState({
    title: '',
    genre: '',
    status: '',
    totalEpisodes: 0,
    watchedEpisodes: 0,
    rating: ''
  });
  const [errors, setErrors] = useState({});

  const validate = () => {
    const errs = {};
    if (!form.title) errs.title = 'Title is required';
    if (!form.genre) errs.genre = 'Genre is required';
    if (form.totalEpisodes < 1) errs.total = 'Total episodes must be at least 1';
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    validate();
  };

  return (
    <div>
      <h2>Add TV Show</h2>
      <form onSubmit={handleSubmit}>
        <label>Title:</label>
        <input value={form.title} onChange={(e) => setForm({ ...form, title: e.target.value })} />
        {errors.title && <p>{errors.title}</p>}

        <label>Genre:</label>
        <input value={form.genre} onChange={(e) => setForm({ ...form, genre: e.target.value })} />
        {errors.genre && <p>{errors.genre}</p>}

        <label>Status:</label>
        <input value={form.status} onChange={(e) => setForm({ ...form, status: e.target.value })} />

        <label>Total Episodes:</label>
        <input
          type="number"
          value={form.totalEpisodes}
          onChange={(e) => setForm({ ...form, totalEpisodes: Number(e.target.value) })}
        />
        {errors.total && <p>{errors.total}</p>}

        <label>Watched Episodes:</label>
        <input
          type="number"
          value={form.watchedEpisodes}
          onChange={(e) => setForm({ ...form, watchedEpisodes: Number(e.target.value) })}
        />

        <label>Rating (1-10, optional):</label>
        <input
          type="number"
          value={form.rating}
          onChange={(e) => setForm({ ...form, rating: e.target.value })}
        />

        <button type="submit">Add TV Show</button>
      </form>
    </div>
  );
};

export default CreateTVShow;

ðŸ§© src/App.js

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

import Login from './Components/Login';
import Register from './Components/Register';
import ErrorPage from './Components/ErrorPage';
import DisplayTVShows from './Viewers/DisplayTVShows';
import ManageTVShow from './Admin/ManageTVShow';
import CreateTVShow from './Admin/CreateTVShow';

const App = () => {
  return (
    <Router>
      <div>
        <h1>SavorStudio</h1>
        <Routes>
          <Route path="/" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/view" element={<DisplayTVShows />} />
          <Route path="/admin/manage" element={<ManageTVShow />} />
          <Route path="/admin/create" element={<CreateTVShow />} />
          <Route path="*" element={<ErrorPage />} />
        </Routes>
      </div>
    </Router>
  );
};

export default App;

ðŸ§© src/apiconfig.js

// Basic API configuration file used for testing and mock integration.
const API_BASE_URL = 'http://localhost:5000/api';

export const endpoints = {
  LOGIN: `${API_BASE_URL}/login`,
  REGISTER: `${API_BASE_URL}/register`,
  TVSHOWS: `${API_BASE_URL}/tvshows`,
  ADMIN_CREATE: `${API_BASE_URL}/admin/create`,
  ADMIN_MANAGE: `${API_BASE_URL}/admin/manage`,
};

export default API_BASE_URL;
